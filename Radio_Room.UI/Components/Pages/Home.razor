@page "/"
@using HtmlAgilityPack;
@using Radio_Room.UI.dbContext
@using Radio_Room.UI
@inject IDialogService DialogService

<h1>Welcome!</h1>

<p role="status">Coordinates: lat = 51.0344 & long = 2.3768 </p>
<p role="status">Country: FR </p>
<p role="status">Current Weather in Dunkirk: @weatherCheck </p>
<p role="status">temperature:  </p>



<MudButton @onclick="OpenWelcomeAsync" Variant="Variant.Filled" Color="Color.Primary">
    How to play...
</MudButton>

@code {
        public string WelcomeDialogScrollable_Dialog = "Here's how you play...";

        private async Task OpenWelcomeAsync()
        {
            var options = new DialogOptions { CloseOnEscapeKey = true };
            //var welcome = await DialogService.ShowAsync<WelcomeDialogScrollable_Dialog>("Welcome to the Radio_Room!", options);
        }
      }

<!--Starting dialogue:-->
<MudStack>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
</MudStack>

<!--First response:-->
<MudButtonGroup>
    <MudButton Class="button" @onclick="@ShowText" @onclick="@response">
        This is US (RTO) operator Clay Doberman from the USS Massachusetts battleship.
        Who is this? @responseOption1  
    </MudButton>
    <MudButton Class="button" >
        This is (RTO) operator Clay Doberman from the USS Massachusetts battleship.
        I read you. 
    </MudButton>
</MudButtonGroup>

<!--Dialogue after 1st response:-->
<MudStack hidden="@isTextVisible">
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">Line1 @dialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
</MudStack>

<!--Dialogue after 2nd response:-->
<MudStack hidden="@isTextVisible">
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
</MudStack>

<!--(after 1st response option) 2nd response:-->
<MudButtonGroup>
    <MudButton Class="button" >
        Yes! Could you describe your surrounding? What's your situation?
    </MudButton>
    <MudButton Class="button" >
        That must have been terrible! Did you lose your squad?
    </MudButton>
</MudButtonGroup>

<!--Dialogue 1A:-->
<MudStack>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
</MudStack>

<!--Dialogue 1B:-->
<MudStack>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
</MudStack>

<!--(after 2nd response option) 2nd response:-->
<MudButtonGroup>
    <MudButton Class="button" >
        I'm going to need more proof of identity.
        Could you give some more information on your squad commander, 
        your squad number, and anything else related to identifying you, 
        so I can check? </MudButton>
    <MudButton Class="button" >
        Why weren't you able to escape with the others?
        Where's your squad? </MudButton>
</MudButtonGroup>

<!--Dialogue 2A:-->
<MudStack>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
</MudStack>

<!--Dialogue 2B:-->
<MudStack>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogueLine</MudElement></MudPaper>
</MudStack>


@code {

    //OpenWeather API call and data retrieval:
    private string weatherCheck = "";

    public class DataObject
    {
        public Weather[] weather = new Weather[1];
    }

    public class Weather
    {
        public int id { get; set; }
        public string main { get; set; }
        public string description { get; set; }
        public string icon { get; set; }
    }

    private const string url = "https://api.openweathermap.org/data/2.5/weather?lat=51.0344&lon=2.3768&appid=";
    protected override async Task OnInitializedAsync()
    {
        HttpClient client = new HttpClient();
        client.BaseAddress = new Uri(url);




        // List data response.
        HttpResponseMessage response = client.GetAsync(url).Result;
        if (response.IsSuccessStatusCode)
        {
            // Parse the response body.
            var dataObjects = response.Content.ReadAsAsync<DataObject>().Result;


            //coordinates = dataObjects.coord[0].lat;
            weatherCheck = dataObjects.weather[0].description;
            //temp = dataObjects.temperature;
            //country = dataObjects.sys[0].country;

        }
        else
        {
            Console.WriteLine("{0} ({ 1})", (int)response.StatusCode, response.ReasonPhrase);
        }
        client.Dispose();
    }
    //new Dialogue.PlayerResponseOption = responseOption;

    public string dialogueLine = "";

    public bool isTextVisible = true;

    private void ShowText()
    {
        isTextVisible = false;
    }

    Dialogue dialogue = new Dialogue();


    //-------------------------------------------------------------------------------------------------------------------
    public static void ConvertHtml()
    {
        // Load your HTML content (e.g., from a file or a web request)
        var htmlDocument = new HtmlDocument();
        htmlDocument.LoadHtml("Components//Pages//Home.razor");

        // Destination file to write text
        StreamWriter writer = new StreamWriter("Save//Progress.txt");

        // Select all <p> elements and buttons
        var paragraphs = htmlDocument.DocumentNode.SelectNodes("//p");

        if (paragraphs != null)
        {
            foreach (var paragraph in paragraphs)
            {
                string paragraphText = paragraph.InnerText;

                // Process the paragraph text as needed

                //File.WriteAllText("Save//Progress.txt", paragraphText);
                writer.WriteLine(paragraphText);
            }
            writer.Close();
        }
    }
    //-----------------------------------------------------------------------------------------
    /*Dialogue code: */
    /* when the player presses a button -> 
     * a overarching function will be triggered 
     * - the int will turn into the option picked (a value is assigned per button 1 or 2 on the first option), 
     * - the database dialogue retrieval method is called
     * Using the int value the dialogue retrieves a specific set of dialoguelines through the PlayerResponseOption 
     * (this is the same as the value of the button)*/

    public int responseOption1 = 1;

    public int responseOption2 = 2;

    public static string connectionString = "ConnectionStrings:SQLiteDefault";

    public void response()
    { 
        {
            if (responseOption1 == 0)
            {
                DialogueResponsesData.Respond(connectionString);
            }
        }
    }


    

    //-------------------------------------------------------------------------------------------------------------------

    //Response and dialogue retrieval functionality
    public class DialogueResponsesData : Dialogue
    {
        public List<DialogueResponses> dialogueResponses = new List<DialogueResponses>();
        private readonly Radio_RoomDbContext dataContext;
        public string connectionString = "ConnectionStrings:SQLiteDefault";

        public DialogueResponsesData(Radio_RoomDbContext context) => this.dataContext = context;

        public void Respond(string connectionString)
        {
            this.connectionString = connectionString;
            if (!dataContext.Dialogues.Any())
            {
                DialogueQueryFilters();
            }

        }

        private void DialogueQueryFilters()
        {
            //var dialogueResponse = dataContext.Dialogues.Find(0);
            var playerResponse = int.Parse("1"); //this needs to grab from the Home buttons
            var dialogueResponses = dataContext.Dialogues.Where(s => s.PlayerResponseOption == playerResponse).ToList(); //this needs to be put into the p tags in home

        }


    }



    public class DialogueResponses
    {
        public int DialogueId { get; set; }
        public string DialogueLine { get; set; }
        public int PlayerResponseOption { get; set; }
    }
    
    
     /*
    public static void GiveResponse()
    {
        public string dialogueLine = new Dialogue;

        if ()
        {
            foreach (var dialogueLine in dialogueLines)
            {
                string responseDialogueText = Dialogue.dialogueLine;
            }
        }

    }
    */


}
