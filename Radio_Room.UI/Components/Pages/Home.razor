@page "/"
@inject Services.IDialogueLines dialoguelines
@using Models


<h1>Welcome!</h1>

<p role="status">Coordinates: lat = 51.0344 & long = 2.3768 </p>
<p role="status">Country: FR </p>
<p role="status">Current Weather in Dunkirk: @weatherCheck </p>
<p role="status">temperature:  </p>

<MudStack>
    <MudPaper Class="pa-3">Line 1 @dialogueLine</MudPaper>
    <MudPaper Class="pa-3">Line 2 @dialogueLine</MudPaper>
    <MudPaper Class="pa-3">Line 3 @dialogueLine</MudPaper>
    <MudPaper Class="pa-3">Line 4 @dialogueLine</MudPaper>
    <MudPaper Class="pa-3">Line 5 @dialogueLine</MudPaper>
</MudStack>
<MudButtonGroup>
    <MudButton> @bind-value=dialogue.DialogueId</MudButton>
    <MudButton> @bind-value=dialogue.DialogueId</MudButton>
</MudButtonGroup>


@code {

    //OpenWeather API call and data retrieval:
    private string weatherCheck = "";

    public class DataObject
    {
        public Weather[] weather = new Weather[1];
    }

    public class Weather
    {
        public int id { get; set; }
        public string main { get; set; }
        public string description { get; set; }
        public string icon { get; set; }
    }

    /* //json data from OpenWeather API//
    "coord": {
    "lon": 2.3768,
    "lat": 51.0344
    },
    "weather": [
    {
    "id": 800,
    "main": "Clear",
    "description": "clear sky",
    "icon": "01n"
    }
    ],
    "base": "stations",
    "main": {
    "temp": 288.39,
    "feels_like": 288.01,
    "temp_min": 286.58,
    "temp_max": 290.89,
    "pressure": 1016,
    "humidity": 78
    },
    "visibility": 10000,
    "wind": {
    "speed": 1.93,
    "deg": 76,
    "gust": 2.06
    },
    "clouds": {
    "all": 0
    },
    "dt": 1719276136,
    "sys": 
    {
    "type": 2,
    "id": 2006560,
    "country": "FR",
    "sunrise": 1719286621,
    "sunset": 1719346153
    },
    "timezone": 7200,
    "id": 6614519,
    "name": "Dunkerque",
    "cod": 200
    }
    */

    private const string url = "https://api.openweathermap.org/data/2.5/weather?lat=51.0344&lon=2.3768&appid=";
    protected override async Task OnInitializedAsync()
    {
        HttpClient client = new HttpClient();
        client.BaseAddress = new Uri(url);




        // List data response.
        HttpResponseMessage response = client.GetAsync(url).Result;
        if (response.IsSuccessStatusCode)
        {
            // Parse the response body.
            var dataObjects = response.Content.ReadAsAsync<DataObject>().Result;


            //coordinates = dataObjects.coord[0].lat;
            weatherCheck = dataObjects.weather[0].description;
            //temp = dataObjects.temperature;
            //country = dataObjects.sys[0].country;

        }
        else
        {
            Console.WriteLine("{0} ({ 1})", (int)response.StatusCode, response.ReasonPhrase);
        }
        client.Dispose();
    }

    //-----------------------------------------------------------------------------------------
    /*Dialogue code: */


    private string dialogueLine = "";

    Dialogue dialogue = new Dialogue();

}
