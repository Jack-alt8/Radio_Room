@page "/"
@using HtmlAgilityPack;
@using Radio_Room.UI.dbContext;
@using Radio_Room.UI;
@inject IDialogueService DialogueService
@using Newtonsoft.Json;
@rendermode InteractiveServer

<p role="status">Coordinates: lat = 51.0344 & long = 2.3768 </p>
<p role="status">Country: FR </p>
<p role="status">Current Weather in Dunkirk: @weatherCheck </p>

<MudButton Class="button">
    See progress <MudNavLink Href="../../Save/Progress.txt" Match="NavLinkMatch.All"></MudNavLink>
</MudButton>

<!--Starting dialogue:-->
<MudStack>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">Hello?</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">Hello? Can anyone read me?</MudElement></MudPaper>
</MudStack>

<!--First response:-->
<MudButtonGroup>
    <MudButton Class="button" @onclick='(() => LoadSpecificDialogue(responseOption1))'>
        This is US (RTO) operator Clay Doberman from the USS Massachusetts battleship.
        Who is this? 
    </MudButton>
    <MudButton Class="button" @onclick='(() => LoadSpecificDialogue(responseOption2))'>
        This is (RTO) operator Clay Doberman from the USS Massachusetts battleship.
        I read you. 
    </MudButton>
</MudButtonGroup>

<!--Dialogue after 1st response:-->
<MudStack>
    <MudPaper Class="pa-3" id="dialogue"><MudElement id="dialogue" HtmlTag="p">@dialogue1.DialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogue2.DialogueLine </MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogue3.DialogueLine </MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p"> @dialogue4.DialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p"> @dialogue5.DialogueLine</MudElement></MudPaper>
</MudStack>

<!--Dialogue after 2nd response:-->
<MudStack>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p"> @dialogue6.DialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p"> @dialogue7.DialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p"> @dialogue8.DialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p"> @dialogue9.DialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p"> @dialogue10.DialogueLine</MudElement></MudPaper>
</MudStack>

<!--(after 1st response option) 2nd response:-->
<!--use a list to store all the potential dialogues and use an if statement in the 
button group "if dialogues = this count render the button group"-->
<MudButtonGroup>
    <MudButton Class="button" @onclick='(() => LoadSpecificDialogue(responseOption101))'>
        Yes! Could you describe your surrounding? What's your situation?
    </MudButton>
    <MudButton Class="button" @onclick='(() => LoadSpecificDialogue(responseOption102))'>
        That must have been terrible! Did you lose your squad?
    </MudButton>
</MudButtonGroup>

<!--Dialogue 1A:-->
<MudStack>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p"> @dialogue11.DialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogue12.DialogueLine </MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogue13.DialogueLine </MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p"> @dialogue14.DialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p"> @dialogue15.DialogueLine</MudElement></MudPaper>
</MudStack>

<!--Dialogue 1B:-->
<MudStack>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p"> @dialogue16.DialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p"> @dialogue17.DialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p"> @dialogue18.DialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p"> @dialogue19.DialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p"> @dialogue20.DialogueLine</MudElement></MudPaper>
</MudStack>

<!--(after 2nd response option) 2nd response:-->
<MudButtonGroup>
    <MudButton Class="button" @onclick='(() => LoadSpecificDialogue(responseOption201))'>
        I'm going to need more proof of identity.
        Could you give some more information on your squad commander, 
        your squad number, and anything else related to identifying you, 
        so I can check? </MudButton>
    <MudButton Class="button" @onclick='(() => LoadSpecificDialogue(responseOption202))'>
        Why weren't you able to escape with the others?
        Where's your squad? </MudButton>
</MudButtonGroup>

<!--Dialogue 2A:-->
<MudStack>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p"> @dialogue21.DialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p"> @dialogue22.DialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p"> @dialogue23.DialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p"> @dialogue24.DialogueLine</MudElement></MudPaper>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p"> @dialogue25.DialogueLine</MudElement></MudPaper>
</MudStack>

<!--Dialogue 2B:-->
<MudStack>
    <MudPaper Class="pa-3"><MudElement HtmlTag="p">@dialogue26.DialogueLine</MudElement></MudPaper>
</MudStack>


@code {

    //OpenWeather API call and data retrieval:
    public string weatherCheck = "";

    public class DataObject
    {
        public Weather[] weather = new Weather[1];
    }

    public class Weather
    {
        public int id { get; set; }
        public string main { get; set; }
        public string description { get; set; }
        public string icon { get; set; }
    }


    // Initializing dialogue database
    public void SeedData()
    {
        var context = new Radio_RoomDbContext();

        try
        {
            if (!context.Dialogues.Any())
            {
                IEnumerable<Dialogue> dialogues = GetDialoguesFromExternalDatabase();
                context.Dialogues.AddRange(dialogues);
                var result = context.SaveChanges();
                Console.WriteLine($"Result: {result}");
            }
        }
        catch (ArgumentException ex)
        {

        }
    }

    public class DialogsList { public List<Dialogue> Dialogues = []; };

    private IEnumerable<Dialogue> GetDialoguesFromExternalDatabase()
    {
        string pathToDialogueJson = "C:\\Users\\Tech Louisville\\OneDrive\\Documents\\CSProjects\\Radio_Room\\Radio_Room.UI\\Dialogues.json";
        string jsonString = File.ReadAllText(pathToDialogueJson);
        var dialogues = JsonConvert.DeserializeObject<DialogsList>(jsonString);

        return dialogues.Dialogues;

    }

    private const string url = "https://api.openweathermap.org/data/2.5/weather?lat=51.0344&lon=2.3768&appid=";
    protected override async Task OnInitializedAsync()
    {
        var context = new Radio_RoomDbContext();
        context.Dialogues.ExecuteDelete();
        context.SaveChanges();

        SeedData();

        // get all dialogues:
        LoadData();

        // web api call
        HttpClient client = new HttpClient();
        client.BaseAddress = new Uri(url);

        // List data response.
        HttpResponseMessage response = client.GetAsync(url).Result;
        if (response.IsSuccessStatusCode)
        {
            // Parse the response body.
            var dataObjects = response.Content.ReadAsAsync<DataObject>().Result;

            weatherCheck = dataObjects.weather[0].description;
        }
        else
        {
            Console.WriteLine("{0} ({1})", (int)response.StatusCode, response.ReasonPhrase);
        }
        client.Dispose();
    }

    /*Dialogue code: */
    /* when the player presses a button -> 
     * a overarching function will be triggered 
     * - the int will turn into the option picked (a value is assigned per button 1 or 2 on the first option), 
     * - the database dialogue retrieval method is called
     * Using the int value the dialogue retrieves a specific set of dialoguelines through the PlayerResponseOption 
     * (this is the same as the value of the button)*/

    // specific player responses:
    public int responseOption1 = 1;

    public int responseOption2 = 2;

    public int responseOption101 = 101;

    public int responseOption102 = 102;

    public int responseOption201 = 201;

    public int responseOption202 = 202;

    //-------------------------------------------------------------------------------------------------------------------

    //specific dialoguelines:
    Dialogue dialogue1 = new Dialogue();

    Dialogue dialogue2 = new Dialogue();

    Dialogue dialogue3 = new Dialogue();

    Dialogue dialogue4 = new Dialogue();

    Dialogue dialogue5 = new Dialogue();

    Dialogue dialogue6 = new Dialogue();

    Dialogue dialogue7 = new Dialogue();

    Dialogue dialogue8 = new Dialogue();

    Dialogue dialogue9 = new Dialogue();

    Dialogue dialogue10 = new Dialogue();

    Dialogue dialogue11 = new Dialogue();

    Dialogue dialogue12 = new Dialogue();

    Dialogue dialogue13 = new Dialogue();

    Dialogue dialogue14 = new Dialogue();

    Dialogue dialogue15 = new Dialogue();

    Dialogue dialogue16 = new Dialogue();

    Dialogue dialogue17 = new Dialogue();

    Dialogue dialogue18 = new Dialogue();

    Dialogue dialogue19 = new Dialogue();

    Dialogue dialogue20 = new Dialogue();

    Dialogue dialogue21 = new Dialogue();

    Dialogue dialogue22 = new Dialogue();

    Dialogue dialogue23 = new Dialogue();

    Dialogue dialogue24 = new Dialogue();

    Dialogue dialogue25 = new Dialogue();

    Dialogue dialogue26 = new Dialogue();


    List<Dialogue> dialogues = new List<Dialogue>();

    private void LoadData()
    {
        dialogues = DialogueService.GetAllDialogues();
    }

    public void LoadSpecificDialogue(int responseOption)
    {
        if (responseOption == 1 || responseOption == 2 || responseOption == 101 || responseOption == 102 || responseOption == 201 || responseOption == 202)
        {
            //this needs to grab from the buttons
            var characterResponse1 = dialogues.Where(s => s.PlayerResponseOption == responseOption && s.DialogueId == 1).FirstOrDefault();
            dialogue1 = characterResponse1;

            var characterResponse2 = dialogues.Where(s => s.PlayerResponseOption == responseOption && s.DialogueId == 2).FirstOrDefault();
            dialogue2 = characterResponse2;

            var characterResponse3 = dialogues.Where(s => s.PlayerResponseOption == responseOption && s.DialogueId == 3).FirstOrDefault();
            dialogue3 = characterResponse3;

            var characterResponse4 = dialogues.Where(s => s.PlayerResponseOption == responseOption && s.DialogueId == 4).FirstOrDefault();
            dialogue4 = characterResponse4;
        }
        else if (responseOption == 2)
        {
            
        }
        else if (responseOption == 101)
        {

        }
        else if (responseOption == 102)
        {

        }
        else if (responseOption == 201)
        {

        }
        else if (responseOption == 202)
        {

        }
    }

}
